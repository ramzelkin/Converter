{"version":3,"sources":["features/currencySelect/currencySelect.module.css","features/resultButton/resultButton.module.css","features/counter/counterSlice.js","api/client.js","features/resultButton/resultButtonSlice.js","features/counter/Counter.js","features/currencySelect/currencySelectSlice.js","features/currencySelect/currencySelect.js","features/resultButton/resultButton.js","App.js","app/store.js","serviceWorker.js","index.js","features/counter/Counter.module.css"],"names":["module","exports","counterSlice","createSlice","name","initialState","input","reducers","convert","state","action","payload","actions","selectInput","counter","client","endpoint","a","body","customConfig","headers","config","method","JSON","stringify","window","fetch","response","json","data","ok","Error","statusText","Promise","reject","message","get","post","fetchCurrencyRateAsync","createAsyncThunk","value","from","to","resultButtonSlice","currencyRate","calculate","output","extraReducers","builder","addCase","fulfilled","getRate","resultButton","Counter","dispatch","useDispatch","useSelector","className","styles","row","textbox","aria-label","onChange","e","target","currencySlice","fromValue","toValue","fromCurrency","toCurrency","currencies","selectFromCurrency","selectToCurrency","getCurrency","currency","getFromCurrency","getToCurrency","CurrencySelect","items","map","item","id","ResultButton","onClick","App","store","configureStore","reducer","counterReducer","currencyReducer","resultButtonReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,IAAM,8B,mBCAxBD,EAAOC,QAAU,CAAC,IAAM,4B,2ICKXC,EAAeC,YAAY,CACtCC,KAAM,UACNC,aANmB,CACjBC,MAAO,GAMTC,SAAU,CACRC,QAAS,SAACC,EAAOC,GACbD,EAAMH,MAAQI,EAAOC,YAKdH,EAAYN,EAAaU,QAAzBJ,QACFK,EAAc,SAACJ,GAAD,OAAWA,EAAMK,QAAQR,OAErCJ,IAAf,Q,iEChBO,SAAea,EAAtB,kC,4CAAO,WAAsBC,GAAtB,uCAAAC,EAAA,8FAA4D,GAA1BC,EAAlC,EAAkCA,KAASC,EAA3C,iBACCC,EAAU,CAAE,eAAgB,oBAE5BC,EAHD,yBAIHC,OAAQJ,EAAO,OAAS,OACrBC,GALA,IAMHC,QAAQ,2BACHA,GACAD,EAAaC,WAIhBF,IACFG,EAAOH,KAAOK,KAAKC,UAAUN,IAb1B,kBAkBoBO,OAAOC,MAAMV,EAAUK,GAlB3C,cAkBGM,EAlBH,iBAmBUA,EAASC,OAnBnB,WAmBHC,EAnBG,QAoBCF,EAASG,GApBV,0CAqBMD,GArBN,cAuBG,IAAIE,MAAMJ,EAASK,YAvBtB,2DAyBIC,QAAQC,OAAO,KAAIC,QAAU,KAAIA,QAAUN,IAzB/C,2D,sBA6BPd,EAAOqB,IAAM,SAAUpB,GAA8B,IAApBG,EAAmB,uDAAJ,GAC9C,OAAOJ,EAAOC,EAAD,YAAC,eAAeG,GAAhB,IAA8BG,OAAQ,UAGrDP,EAAOsB,KAAO,SAAUrB,EAAUE,GAA0B,IAApBC,EAAmB,uDAAJ,GACrD,OAAOJ,EAAOC,EAAD,YAAC,eAAeG,GAAhB,IAA8BD,WClC7C,IAIaoB,EAAyBC,YAAiB,qBAAD,uCAAuB,WAAOC,GAAP,eAAAvB,EAAA,sEAClDF,EAAOqB,IAAP,0FAA8FI,EAAMC,KAApG,wBAAwHD,EAAME,GAA9H,6BADkD,cACnEf,EADmE,yBAElEA,GAFkE,2CAAvB,uDAMzCgB,EAAoBxC,YAAY,CAC3CC,KAAM,eACNC,aAZmB,CACjBuC,aAAc,GAYhBrC,SAAU,CACRsC,UAAW,SAACpC,EAAOC,GACfD,EAAMqC,OAA0B,IAAjBpC,EAAOC,UAG5BoC,cAAe,SAACC,GACfA,EACGC,QAAQX,EAAuBY,WAAW,SAACzC,EAAOC,GACjDD,EAAMmC,aAAelC,EAAOC,QAAQ,mCAAmC,0BAOjEwC,GADgBR,EAAkB/B,QAAhCiC,UACQ,SAACpC,GAAD,OAAWA,EAAM2C,aAAaR,eACtCD,IAAf,Q,OC1BO,SAASU,IACd,IAAMC,EAAWC,cACXjD,EAAQkD,YAAY3C,GACpBiC,EAASU,YAAYL,GAAW7C,EAEtC,OACE,8BACE,sBAAKmD,UAAWC,IAAOC,IAAvB,UACE,uBACEF,UAAWC,IAAOE,QAClBC,aAAW,YACXrB,MAAOlC,EACPwD,SAAU,SAACC,GAAD,OAAOT,EAAS9C,EAAQuD,EAAEC,OAAOxB,WAE7C,uBAAOiB,UAAWC,IAAOE,QACzBpB,MAAOM,S,qBCLFmB,EAAgB9D,YAAY,CACvCC,KAAM,WACNC,aAhBmB,CACjB6D,UAAW,GACXC,QAAS,GACTC,aAAc,MACdC,WAAY,MACZC,WAAY,CACP,MACA,MACA,MACA,MACA,QAOP/D,SAAU,CACRgE,mBAAoB,SAAC9D,EAAOC,GACxBD,EAAM2D,aAAe1D,EAAOC,SAEhC6D,iBAAkB,SAAC/D,EAAOC,GACtBD,EAAM4D,WAAa3D,EAAOC,YAMnB4D,EAAuBN,EAAcrD,QAArC2D,mBACFE,EAAc,SAAChE,GAAD,OAAWA,EAAMiE,SAASJ,YACxCK,EAAkB,SAAClE,GAAD,OAAWA,EAAMiE,SAASN,cAC5CQ,EAAgB,SAACnE,GAAD,OAAWA,EAAMiE,SAASL,YAExCG,EAAqBP,EAAcrD,QAAnC4D,iBAEAP,IAAf,QChCO,SAASY,IACd,IAAMvB,EAAWC,cACXuB,EAAQtB,YAAYiB,GAE1B,OACE,sBAAKhB,UAAWC,IAAOC,IAAvB,UACE,gCACE,wCACA,wBAAQG,SAAU,SAACC,GAAD,OAAOT,EAASiB,EAAmBR,EAAEC,OAAOxB,SAA9D,SACKsC,EAAMC,KAAI,SAACC,GAAD,OACP,wBAAQC,GAAID,EAAZ,SAA8BA,GAAPA,WAIjC,gCACE,sCACA,wBAAQlB,SAAU,SAACC,GAAD,OAAOT,EAASkB,EAAiBT,EAAEC,OAAOxB,SAA5D,SACKsC,EAAMC,KAAI,SAACC,GAAD,OACP,wBAAQC,GAAID,EAAZ,SAA8BA,GAAPA,c,qBCjBhC,SAASE,IACd,IAAM5B,EAAWC,cACXa,EAAeZ,YAAYmB,GAC3BN,EAAab,YAAYoB,GAE/B,OACE,8BACE,qBAAKnB,UAAWC,IAAOC,IAAvB,SACE,wBAAQwB,QAAS,kBAAM7B,EAAShB,EAAuB,CAAEG,KAAM2B,EAAc1B,GAAI2B,MAAjF,yB,MCEOe,MAVf,WACE,OACE,sBAAK3B,UAAU,MAAf,UACI,cAACoB,EAAD,IACA,cAACxB,EAAD,IACA,cAAC6B,EAAD,QCNKG,EAAQC,YAAe,CAClCC,QAAS,CACPzE,QAAS0E,EACTd,SAAUe,EACVrC,aAAcsC,KCGEC,QACW,cAA7BlE,OAAOmE,SAASC,UAEe,UAA7BpE,OAAOmE,SAASC,UAEhBpE,OAAOmE,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUZ,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJa,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,iB,kBEpInBzG,EAAOC,QAAU,CAAC,IAAM,qBAAqB,MAAQ,uBAAuB,OAAS,wBAAwB,QAAU,yBAAyB,YAAc,sD","file":"static/js/main.02e43b40.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"currencySelect_row__3ckdi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"resultButton_row__2AGOS\"};","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n    input: 0\n};\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    convert: (state, action) => {\n        state.input = action.payload;\n    }\n  }\n});\n\nexport const { convert } = counterSlice.actions;\nexport const selectInput = (state) => state.counter.input;\n\nexport default counterSlice.reducer;\n","// A tiny wrapper around fetch(), borrowed from\r\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\r\n\r\nexport async function client(endpoint, { body, ...customConfig } = {}) {\r\n  const headers = { 'Content-Type': 'application/json' }\r\n\r\n  const config = {\r\n    method: body ? 'POST' : 'GET',\r\n    ...customConfig,\r\n    headers: {\r\n      ...headers,\r\n      ...customConfig.headers,\r\n    },\r\n  }\r\n\r\n  if (body) {\r\n    config.body = JSON.stringify(body)\r\n  }\r\n\r\n  let data\r\n  try {\r\n    const response = await window.fetch(endpoint, config)\r\n    data = await response.json()\r\n    if (response.ok) {\r\n      return data\r\n    }\r\n    throw new Error(response.statusText)\r\n  } catch (err) {\r\n    return Promise.reject(err.message ? err.message : data)\r\n  }\r\n}\r\n\r\nclient.get = function (endpoint, customConfig = {}) {\r\n  return client(endpoint, { ...customConfig, method: 'GET' })\r\n}\r\n\r\nclient.post = function (endpoint, body, customConfig = {}) {\r\n  return client(endpoint, { ...customConfig, body })\r\n}\r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport { client } from '../../api/client.js'\r\n\r\nconst initialState = {\r\n    currencyRate: 0\r\n};\r\n\r\nexport const fetchCurrencyRateAsync = createAsyncThunk('currency/fetchRate', async (value) => {\r\n    const response = await client.get(`https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency=${value.from}&to_currency=${value.to}&apikey=IWAWBL3HLYTV52OW`);\r\n    return response;\r\n  }\r\n);\r\n\r\nexport const resultButtonSlice = createSlice({\r\n  name: 'resultButton',\r\n  initialState,\r\n  reducers: {\r\n    calculate: (state, action) => {\r\n        state.output = action.payload * 2.5;\r\n    }\r\n},\r\n  extraReducers: (builder) => {\r\n   builder\r\n     .addCase(fetchCurrencyRateAsync.fulfilled, (state, action) => {\r\n       state.currencyRate = action.payload[\"Realtime Currency Exchange Rate\"][\"5. Exchange Rate\"];\r\n\r\n     });\r\n }\r\n});\r\n\r\nexport const { calculate } = resultButtonSlice.actions;\r\nexport const getRate = (state) => state.resultButton.currencyRate;\r\nexport default resultButtonSlice.reducer;\r\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { convert, selectInput, selectOutput } from './counterSlice';\nimport styles from './Counter.module.css';\nimport { getRate } from '../resultButton/resultButtonSlice';\n\nexport function Counter() {\n  const dispatch = useDispatch();\n  const input = useSelector(selectInput);\n  const output = useSelector(getRate) * input;\n\n  return (\n    <div>\n      <div className={styles.row}>\n        <input\n          className={styles.textbox}\n          aria-label=\"Set value\"\n          value={input}\n          onChange={(e) => dispatch(convert(e.target.value))}\n        />\n        <input className={styles.textbox}\n        value={output}\n        />\n      </div>\n    </div>\n  );\n}\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n    fromValue: '',\r\n    toValue: '',\r\n    fromCurrency: 'USD',\r\n    toCurrency: 'USD',\r\n    currencies: [\r\n         \"USD\",\r\n         \"RUB\",\r\n         \"EUR\",\r\n         \"PLN\",\r\n         \"CNY\"\r\n    ]\r\n};\r\n\r\nexport const currencySlice = createSlice({\r\n  name: 'currency',\r\n  initialState,\r\n  reducers: {\r\n    selectFromCurrency: (state, action) => {\r\n        state.fromCurrency = action.payload;\r\n    },\r\n    selectToCurrency: (state, action) => {\r\n        state.toCurrency = action.payload;\r\n    }\r\n  },\r\n\r\n});\r\n\r\nexport const { selectFromCurrency } = currencySlice.actions;\r\nexport const getCurrency = (state) => state.currency.currencies;\r\nexport const getFromCurrency = (state) => state.currency.fromCurrency;\r\nexport const getToCurrency = (state) => state.currency.toCurrency;\r\n\r\nexport const { selectToCurrency } = currencySlice.actions;\r\n\r\nexport default currencySlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport styles from './currencySelect.module.css';\r\nimport { selectFromCurrency, selectToCurrency, getCurrency } from './currencySelectSlice';\r\n\r\nexport function CurrencySelect() {\r\n  const dispatch = useDispatch();\r\n  const items = useSelector(getCurrency);\r\n\r\n  return (\r\n    <div className={styles.row}>\r\n      <div>\r\n        <span>From</span>\r\n        <select onChange={(e) => dispatch(selectFromCurrency(e.target.value))}>\r\n            {items.map((item) =>\r\n                <option id={item} key={item}>{item}</option>\r\n            )}\r\n        </select>\r\n      </div>\r\n      <div>\r\n        <span>To</span>\r\n        <select onChange={(e) => dispatch(selectToCurrency(e.target.value))}>\r\n            {items.map((item) =>\r\n                <option id={item} key={item}>{item}</option>\r\n            )}\r\n        </select>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchCurrencyRateAsync } from './resultButtonSlice';\r\nimport { getFromCurrency, getToCurrency } from '../currencySelect/currencySelectSlice';\r\nimport styles from './resultButton.module.css';\r\n\r\nexport function ResultButton() {\r\n  const dispatch = useDispatch();\r\n  const fromCurrency = useSelector(getFromCurrency);\r\n  const toCurrency = useSelector(getToCurrency);\r\n\r\n  return (\r\n    <div>\r\n      <div className={styles.row}>\r\n        <button onClick={() => dispatch(fetchCurrencyRateAsync({ from: fromCurrency, to: toCurrency }))}>Convert</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport { Counter } from './features/counter/Counter';\nimport { CurrencySelect } from './features/currencySelect/currencySelect';\nimport { ResultButton } from './features/resultButton/resultButton';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <CurrencySelect />\n        <Counter />\n        <ResultButton />\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport currencyReducer from '../features/currencySelect/currencySelectSlice';\nimport resultButtonReducer from '../features/resultButton/resultButtonSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    currency: currencyReducer,\n    resultButton: resultButtonReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Counter_row__16yvy\",\"value\":\"Counter_value__2uogu\",\"button\":\"Counter_button__13hNb\",\"textbox\":\"Counter_textbox__BcvrH\",\"asyncButton\":\"Counter_asyncButton__2Mcxn Counter_button__13hNb\"};"],"sourceRoot":""}